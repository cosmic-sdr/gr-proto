/* -*- c++ -*- */
/*
 * Copyright 2012 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * GNU Radio is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3, or (at your option)
 * any later version.
 *
 * GNU Radio is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with GNU Radio; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street,
 * Boston, MA 02110-1301, USA.
 */

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include "complex_to_mag_impl.h"
#include <gnuradio/io_signature.h>
//#include <gnuradio/io_signature.h>
#include <CL/sycl.hpp>
#include <iostream>
#include <iterator>
#include <volk/volk.h>

using namespace cl::sycl;

namespace gr {
namespace blocks {

complex_to_mag::sptr complex_to_mag::make(size_t vlen)
{
    return gnuradio::get_initial_sptr(new complex_to_mag_impl(vlen));
}

complex_to_mag_impl::complex_to_mag_impl(size_t vlen)
    : sync_block("complex_to_mag",
                 io_signature::make(1, 1, sizeof(gr_complex) * vlen),
                 io_signature::make(1, 1, sizeof(float) * vlen)),
      d_vlen(vlen)
{
    const int alignment_multiple = volk_get_alignment() / sizeof(float);
    set_alignment(std::max(1, alignment_multiple));
}

int complex_to_mag_impl::work(int noutput_items,
                              gr_vector_const_void_star& input_items,
                              gr_vector_void_star& output_items)
{
    const gr_complex* in = (const gr_complex*)input_items[0];
    float* out = (float*)output_items[0];
    int noi = noutput_items * d_vlen;


    std::vector<gr_complex*> real(noi);
    std::vector<gr_complex*> imag(noi);
    unsigned int number;
    for(number = 0; number < noi; number++){
      real[number] = *in++;
      imag[number] = *in++;
    }


    // Create a queue to work on
    queue q;

    // Create buffers from a & b vectors
    buffer<float*> Real { std::begin(real), std::end(real) };
    buffer<float*> Imag { std::begin(imag), std::end(imag) };

    {
      // A buffer of N float using the storage of c
      buffer<float*> Mag { out, noi };
      
      /* The command group describing all operations needed for the kernel
	 execution */
      q.submit([&](handler &cgh) {
		 // In the kernel A and B are read, but C is written
		 auto kReal = Real.get_access<access::mode::read>(cgh);
		 auto kImag = Imag.get_access<access::mode::read>(cgh);
		 auto kMag = Mag.get_access<access::mode::write>(cgh);
		 
		 // Enqueue a parallel kernel
		 cgh.parallel_for<class vector_add>(N,
                                           [=] (id<1> index) {
                                             kMag[index] = sqrtf((kReal[index]*kReal[index]) + (kImag[index]*kImag[index]));
                                           });
	       }); //< End of our commands for this queue
    } //< Buffer C goes out of scope and copies back values to c
    
    
    

    return noutput_items;
}

} /* namespace blocks */
} /* namespace gr */
