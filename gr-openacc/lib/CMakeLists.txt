# Copyright 2011,2012,2016 Free Software Foundation, Inc.
#
# This file was generated by gr_modtool, a tool from the GNU Radio framework
# This file is a part of gr-openacc
#
# GNU Radio is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3, or (at your option)
# any later version.
#
# GNU Radio is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with GNU Radio; see the file COPYING.  If not, write to
# the Free Software Foundation, Inc., 51 Franklin Street,
# Boston, MA 02110-1301, USA.

set(VOLK_LIBRARIES volk)

set (CMAKE_CXX_STANDARD 11)

IF(CMAKE_BUILD_TYPE MATCHES DEBUG)
    MESSAGE(STATUS "building for debug...")
ELSE(CMAKE_BUILD_TYPE MATCHES DEBUG)
    MESSAGE(STATUS "Release mode: increasing compiler optimizations...")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O2")
ENDIF(CMAKE_BUILD_TYPE MATCHES DEBUG)

IF(NOT $ENV{OPENARC_ARCH} OR $ENV{OPENARC_ARCH} MATCHES 0)
    set(OUTPUTSUFFIX "cu")
ELSE(NOT $ENV{OPENARC_ARCH} OR $ENV{OPENARC_ARCH} MATCHES 0)
    set(OUTPUTSUFFIX "cl")
ENDIF(NOT $ENV{OPENARC_ARCH} OR $ENV{OPENARC_ARCH} MATCHES 0)

########################################################################
# Setup library
########################################################################
include(GrPlatform) #define LIB_SUFFIX

include_directories(${Boost_INCLUDE_DIR} ${OpenARC_INCLUDE_DIR})
IF($ENV{OPENARC_ARCH} MATCHES 0)
include_directories(${CUDA_INCLUDE_DIR})
ELSE($ENV{OPENARC_ARCH} MATCHES 0)
include_directories(${OpenCL_INCLUDE_DIR})
ENDIF($ENV{OPENARC_ARCH} MATCHES 0)
IF(${TR_MODE} MATCHES 3)
include_directories(${MCL_INCLUDE_DIR})
ENDIF(${TR_MODE} MATCHES 3)

link_directories(${Boost_LIBRARY_DIRS})
link_directories(${FFTW3F_LIBRARY_DIRS})

############################################
# Generate OpenACC output files by OpenARC #
############################################
IF(NOT ${TR_MODE} OR ${TR_MODE} MATCHES 0)

add_custom_command(OUTPUT accLog_kernel.cpp openarc_kernel_accLog.${OUTPUTSUFFIX}
    COMMAND ${OpenARC_BIN_DIR}/openarc -addIncludePath=${OpenARC_INCLUDE_DIR} -gpuConfFile=${CMAKE_CURRENT_SOURCE_DIR}/openarcConf_accLog.txt ${CMAKE_CURRENT_SOURCE_DIR}/accLog_kernel.c && cp ${CMAKE_CURRENT_BINARY_DIR}/cetus_output_accLog/accLog_kernel.cpp ${CMAKE_CURRENT_BINARY_DIR}/ && cp ${CMAKE_CURRENT_BINARY_DIR}/cetus_output_accLog/openarc_kernel_accLog.${OUTPUTSUFFIX} ${CMAKE_CURRENT_BINARY_DIR}/ && rm -rf ${CMAKE_CURRENT_BINARY_DIR}/cetus_output_accLog
    DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/accLog_kernel.c)

#add_custom_command(OUTPUT accComplexToArg_kernel.cpp openarc_kernel_accComplexToArg.${OUTPUTSUFFIX}
#    COMMAND ${OpenARC_BIN_DIR}/openarc -addIncludePath=${OpenARC_INCLUDE_DIR} -gpuConfFile=${CMAKE_CURRENT_SOURCE_DIR}/openarcConf_accComplexToArg.txt ${CMAKE_CURRENT_SOURCE_DIR}/accComplexToArg_kernel.c && cp ${CMAKE_CURRENT_BINARY_DIR}/cetus_output_accComplexToArg/accComplexToArg_kernel.cpp ${CMAKE_CURRENT_BINARY_DIR}/ && cp ${CMAKE_CURRENT_BINARY_DIR}/cetus_output_accComplexToArg/openarc_kernel_accComplexToArg.${OUTPUTSUFFIX} ${CMAKE_CURRENT_BINARY_DIR}/ && rm -rf ${CMAKE_CURRENT_BINARY_DIR}/cetus_output_accComplexToArg
#    DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/accComplexToArg_kernel.c)

#add_custom_command(OUTPUT accComplexToMag_kernel.cpp openarc_kernel_accComplexToMag.${OUTPUTSUFFIX}
#    COMMAND ${OpenARC_BIN_DIR}/openarc -addIncludePath=${OpenARC_INCLUDE_DIR} -gpuConfFile=${CMAKE_CURRENT_SOURCE_DIR}/openarcConf_accComplexToMag.txt ${CMAKE_CURRENT_SOURCE_DIR}/accComplexToMag_kernel.c && cp ${CMAKE_CURRENT_BINARY_DIR}/cetus_output_accComplexToMag/accComplexToMag_kernel.cpp ${CMAKE_CURRENT_BINARY_DIR}/ && cp ${CMAKE_CURRENT_BINARY_DIR}/cetus_output_accComplexToMag/openarc_kernel_accComplexToMag.${OUTPUTSUFFIX} ${CMAKE_CURRENT_BINARY_DIR}/ && rm -rf ${CMAKE_CURRENT_BINARY_DIR}/cetus_output_accComplexToMag
#    DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/accComplexToMag_kernel.c)

#add_custom_command(OUTPUT accComplexToMagPhase_kernel.cpp openarc_kernel_accComplexToMagPhase.${OUTPUTSUFFIX}
#    COMMAND ${OpenARC_BIN_DIR}/openarc -addIncludePath=${OpenARC_INCLUDE_DIR} -gpuConfFile=${CMAKE_CURRENT_SOURCE_DIR}/openarcConf_accComplexToMagPhase.txt ${CMAKE_CURRENT_SOURCE_DIR}/accComplexToMagPhase_kernel.c && cp ${CMAKE_CURRENT_BINARY_DIR}/cetus_output_accComplexToMagPhase/accComplexToMagPhase_kernel.cpp ${CMAKE_CURRENT_BINARY_DIR}/ && cp ${CMAKE_CURRENT_BINARY_DIR}/cetus_output_accComplexToMagPhase/openarc_kernel_accComplexToMagPhase.${OUTPUTSUFFIX} ${CMAKE_CURRENT_BINARY_DIR}/ && rm -rf ${CMAKE_CURRENT_BINARY_DIR}/cetus_output_accComplexToMagPhase
#    DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/accComplexToMagPhase_kernel.c)

#add_custom_command(OUTPUT accMagPhaseToComplex_kernel.cpp openarc_kernel_accMagPhaseToComplex.${OUTPUTSUFFIX}
#    COMMAND ${OpenARC_BIN_DIR}/openarc -addIncludePath=${OpenARC_INCLUDE_DIR} -gpuConfFile=${CMAKE_CURRENT_SOURCE_DIR}/openarcConf_accMagPhaseToComplex.txt ${CMAKE_CURRENT_SOURCE_DIR}/accMagPhaseToComplex_kernel.c && cp ${CMAKE_CURRENT_BINARY_DIR}/cetus_output_accMagPhaseToComplex/accMagPhaseToComplex_kernel.cpp ${CMAKE_CURRENT_BINARY_DIR}/ && cp ${CMAKE_CURRENT_BINARY_DIR}/cetus_output_accMagPhaseToComplex/openarc_kernel_accMagPhaseToComplex.${OUTPUTSUFFIX} ${CMAKE_CURRENT_BINARY_DIR}/ && rm -rf ${CMAKE_CURRENT_BINARY_DIR}/cetus_output_accMagPhaseToComplex
#    DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/accMagPhaseToComplex_kernel.c)

ELSEIF(${TR_MODE} MATCHES 3)
    set(OPENARC_COMMANDS "-macro=TR_MODE=3 -targetArch=4")
    set(TROUTSUFFIX "cpp")
add_custom_command(OUTPUT accLog_kernel.cpp
    COMMAND ${OpenARC_BIN_DIR}/openarc ${OPENARC_COMMANDS} -addIncludePath=${OpenARC_INCLUDE_DIR} -gpuConfFile=${CMAKE_CURRENT_SOURCE_DIR}/openarcConf_accLog.txt ${CMAKE_CURRENT_SOURCE_DIR}/accLog_kernel.c && cp ${CMAKE_CURRENT_BINARY_DIR}/cetus_output_accLog/accLog_kernel.${TROUTSUFFIX} ${CMAKE_CURRENT_BINARY_DIR}/accLog_kernel.cpp && cp ${CMAKE_CURRENT_BINARY_DIR}/cetus_output_accLog/openarc_kernel_accLog.${OUTPUTSUFFIX} ${CMAKE_CURRENT_BINARY_DIR}/ && rm -rf ${CMAKE_CURRENT_BINARY_DIR}/cetus_output_accLog
    DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/accLog_kernel.c)

#add_custom_command(OUTPUT accComplexToArg_kernel.cpp 
#    COMMAND ${OpenARC_BIN_DIR}/openarc ${OPENARC_COMMANDS} -addIncludePath=${OpenARC_INCLUDE_DIR} -gpuConfFile=${CMAKE_CURRENT_SOURCE_DIR}/openarcConf_accComplexToArg.txt ${CMAKE_CURRENT_SOURCE_DIR}/accComplexToArg_kernel.c && cp ${CMAKE_CURRENT_BINARY_DIR}/cetus_output_accComplexToArg/accComplexToArg_kernel.${TROUTSUFFIX} ${CMAKE_CURRENT_BINARY_DIR}/accComplexToArg_kernel.cpp && cp ${CMAKE_CURRENT_BINARY_DIR}/cetus_output_accComplexToArg/openarc_kernel_accComplexToArg.${OUTPUTSUFFIX} ${CMAKE_CURRENT_BINARY_DIR}/ && rm -rf ${CMAKE_CURRENT_BINARY_DIR}/cetus_output_accComplexToArg
#    DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/accComplexToArg_kernel.c)

#add_custom_command(OUTPUT accComplexToMag_kernel.cpp 
#    COMMAND ${OpenARC_BIN_DIR}/openarc ${OPENARC_COMMANDS} -addIncludePath=${OpenARC_INCLUDE_DIR} -gpuConfFile=${CMAKE_CURRENT_SOURCE_DIR}/openarcConf_accComplexToMag.txt ${CMAKE_CURRENT_SOURCE_DIR}/accComplexToMag_kernel.c && cp ${CMAKE_CURRENT_BINARY_DIR}/cetus_output_accComplexToMag/accComplexToMag_kernel.${TROUTSUFFIX} ${CMAKE_CURRENT_BINARY_DIR}/accComplexToMag_kernel.cpp && cp ${CMAKE_CURRENT_BINARY_DIR}/cetus_output_accComplexToMag/openarc_kernel_accComplexToMag.${OUTPUTSUFFIX} ${CMAKE_CURRENT_BINARY_DIR}/ && rm -rf ${CMAKE_CURRENT_BINARY_DIR}/cetus_output_accComplexToMag
#    DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/accComplexToMag_kernel.c)

#add_custom_command(OUTPUT accComplexToMagPhase_kernel.cpp 
#    COMMAND ${OpenARC_BIN_DIR}/openarc ${OPENARC_COMMANDS} -addIncludePath=${OpenARC_INCLUDE_DIR} -gpuConfFile=${CMAKE_CURRENT_SOURCE_DIR}/openarcConf_accComplexToMagPhase.txt ${CMAKE_CURRENT_SOURCE_DIR}/accComplexToMagPhase_kernel.c && cp ${CMAKE_CURRENT_BINARY_DIR}/cetus_output_accComplexToMagPhase/accComplexToMagPhase_kernel.${TROUTSUFFIX} ${CMAKE_CURRENT_BINARY_DIR}/accComplexToMagPhase_kernel.cpp && cp ${CMAKE_CURRENT_BINARY_DIR}/cetus_output_accComplexToMagPhase/openarc_kernel_accComplexToMagPhase.${OUTPUTSUFFIX} ${CMAKE_CURRENT_BINARY_DIR}/ && rm -rf ${CMAKE_CURRENT_BINARY_DIR}/cetus_output_accComplexToMagPhase
#    DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/accComplexToMagPhase_kernel.c)

#add_custom_command(OUTPUT accMagPhaseToComplex_kernel.cpp 
#    COMMAND ${OpenARC_BIN_DIR}/openarc ${OPENARC_COMMANDS} -addIncludePath=${OpenARC_INCLUDE_DIR} -gpuConfFile=${CMAKE_CURRENT_SOURCE_DIR}/openarcConf_accMagPhaseToComplex.txt ${CMAKE_CURRENT_SOURCE_DIR}/accMagPhaseToComplex_kernel.c && cp ${CMAKE_CURRENT_BINARY_DIR}/cetus_output_accMagPhaseToComplex/accMagPhaseToComplex_kernel.${TROUTSUFFIX} ${CMAKE_CURRENT_BINARY_DIR}/accMagPhaseToComplex_kernel.cpp && cp ${CMAKE_CURRENT_BINARY_DIR}/cetus_output_accMagPhaseToComplex/openarc_kernel_accMagPhaseToComplex.${OUTPUTSUFFIX} ${CMAKE_CURRENT_BINARY_DIR}/ && rm -rf ${CMAKE_CURRENT_BINARY_DIR}/cetus_output_accMagPhaseToComplex
#    DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/accMagPhaseToComplex_kernel.c)

ELSE(NOT ${TR_MODE} OR ${TR_MODE} MATCHES 0)

IF(${TR_MODE} MATCHES 1)
    set(OPENARC_COMMANDS "-macro=TR_MODE=1 -ompaccInter=3")
    set(TROUTSUFFIX "c")
ELSEIF(${TR_MODE} MATCHES 2)
    set(OPENARC_COMMANDS "-macro=TR_MODE=2 -ompaccInter=4")
    set(TROUTSUFFIX "c")
ENDIF(${TR_MODE} MATCHES 1)

add_custom_command(OUTPUT accLog_kernel.cpp
    COMMAND ${OpenARC_BIN_DIR}/openarc ${OPENARC_COMMANDS} -addIncludePath=${OpenARC_INCLUDE_DIR} -gpuConfFile=${CMAKE_CURRENT_SOURCE_DIR}/openarcConf_accLog.txt ${CMAKE_CURRENT_SOURCE_DIR}/accLog_kernel.c && cp ${CMAKE_CURRENT_BINARY_DIR}/cetus_output_accLog/accLog_kernel.${TROUTSUFFIX} ${CMAKE_CURRENT_BINARY_DIR}/accLog_kernel.cpp && rm -rf ${CMAKE_CURRENT_BINARY_DIR}/cetus_output_accLog
    DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/accLog_kernel.c)

#add_custom_command(OUTPUT accComplexToArg_kernel.cpp 
#    COMMAND ${OpenARC_BIN_DIR}/openarc ${OPENARC_COMMANDS} -addIncludePath=${OpenARC_INCLUDE_DIR} -gpuConfFile=${CMAKE_CURRENT_SOURCE_DIR}/openarcConf_accComplexToArg.txt ${CMAKE_CURRENT_SOURCE_DIR}/accComplexToArg_kernel.c && cp ${CMAKE_CURRENT_BINARY_DIR}/cetus_output_accComplexToArg/accComplexToArg_kernel.${TROUTSUFFIX} ${CMAKE_CURRENT_BINARY_DIR}/accComplexToArg_kernel.cpp && rm -rf ${CMAKE_CURRENT_BINARY_DIR}/cetus_output_accComplexToArg
#    DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/accComplexToArg_kernel.c)

#add_custom_command(OUTPUT accComplexToMag_kernel.cpp 
#    COMMAND ${OpenARC_BIN_DIR}/openarc ${OPENARC_COMMANDS} -addIncludePath=${OpenARC_INCLUDE_DIR} -gpuConfFile=${CMAKE_CURRENT_SOURCE_DIR}/openarcConf_accComplexToMag.txt ${CMAKE_CURRENT_SOURCE_DIR}/accComplexToMag_kernel.c && cp ${CMAKE_CURRENT_BINARY_DIR}/cetus_output_accComplexToMag/accComplexToMag_kernel.${TROUTSUFFIX} ${CMAKE_CURRENT_BINARY_DIR}/accComplexToMag_kernel.cpp && rm -rf ${CMAKE_CURRENT_BINARY_DIR}/cetus_output_accComplexToMag
#    DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/accComplexToMag_kernel.c)

#add_custom_command(OUTPUT accComplexToMagPhase_kernel.cpp 
#    COMMAND ${OpenARC_BIN_DIR}/openarc ${OPENARC_COMMANDS} -addIncludePath=${OpenARC_INCLUDE_DIR} -gpuConfFile=${CMAKE_CURRENT_SOURCE_DIR}/openarcConf_accComplexToMagPhase.txt ${CMAKE_CURRENT_SOURCE_DIR}/accComplexToMagPhase_kernel.c && cp ${CMAKE_CURRENT_BINARY_DIR}/cetus_output_accComplexToMagPhase/accComplexToMagPhase_kernel.${TROUTSUFFIX} ${CMAKE_CURRENT_BINARY_DIR}/accComplexToMagPhase_kernel.cpp && rm -rf ${CMAKE_CURRENT_BINARY_DIR}/cetus_output_accComplexToMagPhase
#    DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/accComplexToMagPhase_kernel.c)

#add_custom_command(OUTPUT accMagPhaseToComplex_kernel.cpp 
#    COMMAND ${OpenARC_BIN_DIR}/openarc ${OPENARC_COMMANDS} -addIncludePath=${OpenARC_INCLUDE_DIR} -gpuConfFile=${CMAKE_CURRENT_SOURCE_DIR}/openarcConf_accMagPhaseToComplex.txt ${CMAKE_CURRENT_SOURCE_DIR}/accMagPhaseToComplex_kernel.c && cp ${CMAKE_CURRENT_BINARY_DIR}/cetus_output_accMagPhaseToComplex/accMagPhaseToComplex_kernel.${TROUTSUFFIX} ${CMAKE_CURRENT_BINARY_DIR}/accMagPhaseToComplex_kernel.cpp && rm -rf ${CMAKE_CURRENT_BINARY_DIR}/cetus_output_accMagPhaseToComplex
#    DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/accMagPhaseToComplex_kernel.c)

ENDIF(NOT ${TR_MODE} OR ${TR_MODE} MATCHES 0)


list(APPEND openacc_sources
    GRACCBase.cpp
    accLog_impl.cc )

list(APPEND openacc_sources
    accLog_kernel.cpp
    #accComplexToArg_kernel.cpp
    #accComplexToMagPhase_kernel.cpp
    #accMagPhaseToComplex_kernel.cpp
    #accComplexToMag_kernel.cpp
)

set(openacc_sources "${openacc_sources}" PARENT_SCOPE)
if(NOT openacc_sources)
	MESSAGE(STATUS "No C++ sources... skipping lib/")
	return()
endif(NOT openacc_sources)

add_library(gnuradio-openacc SHARED ${openacc_sources})
target_compile_definitions(
    gnuradio-openacc
    PRIVATE -DTR_MODE=${TR_MODE}
    PRIVATE -DOPENARC_ARCH=$ENV{OPENARC_ARCH}
)
target_link_libraries(gnuradio-openacc ${Boost_LIBRARIES} ${GNURADIO_ALL_LIBRARIES})
target_link_libraries(gnuradio-openacc gnuradio-blocks gnuradio-filter ${VOLK_LIBRARIES} ${Boost_LIBRARIES})
target_link_libraries(gnuradio-openacc ${FFTW3F_LIBRARIES})
#target_link_libraries(gnuradio-openacc ${CLFFT_LIBRARIES})

IF(NOT ${TR_MODE} OR ${TR_MODE} MATCHES 0)

target_link_libraries(gnuradio-openacc ${OpenARC_LIBRARIES})
IF($ENV{OPENARC_ARCH} MATCHES 0)
target_link_libraries(gnuradio-openacc ${CUDA_LIBRARIES})
ELSEIF($ENV{OPENARC_ARCH} MATCHES 1)
target_link_libraries(gnuradio-openacc ${OpenCL_LIBRARY})
ENDIF($ENV{OPENARC_ARCH} MATCHES 0)

ELSEIF(${TR_MODE} MATCHES 3)

target_compile_options(
  gnuradio-openacc
  PRIVATE -Wall -D_OPENCL -DCL_USE_DEPRECATED_OPENCL_1_2_APIS
)
target_link_libraries(gnuradio-openacc ${MCL_LIBRARIES} ${MCL_MISC_LIBRARIES} ${OpenCL_LIBRARY} -Wl,-rpath -Wl,$ENV{mclinstallroot}/lib)

ENDIF(NOT ${TR_MODE} OR ${TR_MODE} MATCHES 0)


set_target_properties(gnuradio-openacc PROPERTIES DEFINE_SYMBOL "gnuradio_openacc_EXPORTS")

if(APPLE)
    set_target_properties(gnuradio-openacc PROPERTIES
        INSTALL_NAME_DIR "${CMAKE_INSTALL_PREFIX}/lib"
    )
endif(APPLE)

########################################################################
# Install built library files
########################################################################
include(GrMiscUtils)
GR_LIBRARY_FOO(gnuradio-openacc RUNTIME_COMPONENT "openacc_runtime" DEVEL_COMPONENT "openacc_devel")

########################################################################
# Build and register unit test
########################################################################
include(GrTest)

include_directories(${CPPUNIT_INCLUDE_DIRS})
list(APPEND test_openacc_sources
    ${CMAKE_CURRENT_SOURCE_DIR}/GRACCBase.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/test_openacc.cc
    ${CMAKE_CURRENT_SOURCE_DIR}/qa_openacc.cc
    ${CMAKE_CURRENT_SOURCE_DIR}/qa_accLog.cc
    )

list(APPEND test_openacc_sources
    ${CMAKE_CURRENT_BINARY_DIR}/accLog_kernel.cpp
    #${CMAKE_CURRENT_BINARY_DIR}/accComplexToMag_kernel.cpp
    #${CMAKE_CURRENT_BINARY_DIR}/accComplexToArg_kernel.cpp
    #${CMAKE_CURRENT_BINARY_DIR}/accComplexToMagPhase_kernel.cpp
    #${CMAKE_CURRENT_BINARY_DIR}/accMagPhaseToComplex_kernel.cpp
)


add_executable(test-openacc ${test_openacc_sources})

target_compile_definitions(
    test-openacc
    PRIVATE -DTR_MODE=${TR_MODE}
    PRIVATE -DOPENARC_ARCH=$ENV{OPENARC_ARCH}
)

target_link_libraries(
  test-openacc
  ${GNURADIO_RUNTIME_LIBRARIES}
  ${Boost_LIBRARIES}
  ${CPPUNIT_LIBRARIES}
  ${VOLK_LIBRARIES}
  ${FFTW3F_LIBRARIES}
  gnuradio-openacc
  #${CLFFT_LIBRARIES}
  gnuradio-blocks
  gnuradio-filter
)

IF(NOT ${TR_MODE} OR ${TR_MODE} MATCHES 0)

#target_link_libraries(test-openacc ${OpenARC_LIBRARIES})
IF($ENV{OPENARC_ARCH} MATCHES 0)
target_link_libraries(test-openacc ${CUDA_LIBRARIES})
ELSEIF($ENV{OPENARC_ARCH} MATCHES 1)
target_link_libraries(test-openacc ${OpenCL_LIBRARY})
ENDIF($ENV{OPENARC_ARCH} MATCHES 0)

ELSEIF(${TR_MODE} MATCHES 3)

target_compile_options(
  test-openacc
  PRIVATE -Wall -D_OPENCL -DCL_USE_DEPRECATED_OPENCL_1_2_APIS
)
target_link_libraries(test-openacc ${MCL_LIBRARIES} ${MCL_MISC_LIBRARIES} ${OpenCL_LIBRARY} -Wl,-rpath -Wl,$ENV{mclinstallroot}/lib)

ELSEIF(${TR_MODE} MATCHES 1)

target_compile_options(
  test-openacc
  PRIVATE -fopenmp
)
target_link_libraries(
  test-openacc
  -lgomp
)

ENDIF(NOT ${TR_MODE} OR ${TR_MODE} MATCHES 0)

GR_ADD_TEST(test_openacc test-openacc)


########################################################################
# Build and register test-acclog
########################################################################
list(APPEND test_acclog_sources
    ${CMAKE_CURRENT_SOURCE_DIR}/test-acclog.cc
    ${CMAKE_CURRENT_SOURCE_DIR}/accLog_impl.cc
    ${CMAKE_CURRENT_SOURCE_DIR}/GRACCBase.cpp
    ${CMAKE_CURRENT_BINARY_DIR}/accLog_kernel.cpp
)

add_executable(test-acclog ${test_acclog_sources})

target_compile_definitions(
    test-acclog
    PRIVATE -DGRACC_ONLY
    PRIVATE -DTR_MODE=${TR_MODE}
    PRIVATE -DOPENARC_ARCH=$ENV{OPENARC_ARCH}
)

target_link_libraries(
  test-acclog
  ${GNURADIO_RUNTIME_LIBRARIES}
  ${Boost_LIBRARIES}
  gnuradio-openacc
)

IF(NOT ${TR_MODE} OR ${TR_MODE} MATCHES 0)

IF($ENV{OPENARC_ARCH} MATCHES 0)
target_link_libraries(test-acclog ${CUDA_LIBRARIES})
ELSEIF($ENV{OPENARC_ARCH} MATCHES 1)
target_link_libraries(test-acclog ${OpenCL_LIBRARY})
ENDIF($ENV{OPENARC_ARCH} MATCHES 0)

ELSEIF(${TR_MODE} MATCHES 3)

target_compile_options(
  test-acclog
  PRIVATE -Wall -D_OPENCL -DCL_USE_DEPRECATED_OPENCL_1_2_APIS
)
target_link_libraries(test-acclog ${MCL_LIBRARIES} ${MCL_MISC_LIBRARIES} ${OpenCL_LIBRARY} -Wl,-rpath -Wl,$ENV{mclinstallroot}/lib)

ELSEIF(${TR_MODE} MATCHES 1)

target_compile_options(
  test-acclog
  PRIVATE -fopenmp
)
target_link_libraries(
  test-acclog
  -lgomp
)

ENDIF(NOT ${TR_MODE} OR ${TR_MODE} MATCHES 0)

install(TARGETS test-acclog DESTINATION "${CMAKE_INSTALL_PREFIX}/bin" RUNTIME)
IF(NOT ${TR_MODE} OR ${TR_MODE} MATCHES 0 OR ${TR_MODE} MATCHES 3)
install(FILES ${CMAKE_CURRENT_BINARY_DIR}/openarc_kernel_accLog.${OUTPUTSUFFIX} DESTINATION "${CMAKE_INSTALL_PREFIX}/bin")
ENDIF(NOT ${TR_MODE} OR ${TR_MODE} MATCHES 0 OR ${TR_MODE} MATCHES 3)

########################################################
# Generate ASPEN model for acclog module using OpenARC #
########################################################
#add_custom_target(accLogAspenGen ALL
#    COMMAND ${CMAKE_CURRENT_SOURCE_DIR}/accLog_aspengen.bash -f=${CMAKE_CURRENT_SOURCE_DIR}/accLog_kernel.c && cp ${CMAKE_CURRENT_BINARY_DIR}/aspen_output_accLog/accLog.aspen ${CMAKE_CURRENT_SOURCE_DIR} && rm -rf ${CMAKE_CURRENT_BINARY_DIR}/aspen_output_accLog
#    DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/accLog_aspengen.bash ${CMAKE_CURRENT_SOURCE_DIR}/accLog_kernel.c ${CMAKE_CURRENT_BINARY_DIR}/accComplexToArg_kernel.cpp)
#install(FILES ${CMAKE_CURRENT_BINARY_DIR}/accLog.aspen DESTINATION "${CMAKE_INSTALL_PREFIX}/bin")


########################################################################
# Print summary
########################################################################
message(STATUS "Using install prefix: ${CMAKE_INSTALL_PREFIX}")
message(STATUS "Building for version: ${VERSION} / ${LIBVER}")

