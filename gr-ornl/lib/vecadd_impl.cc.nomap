/* -*- c++ -*- */
/* 
 * Copyright 2019 ornl.
 * 
 * This is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3, or (at your option)
 * any later version.
 * 
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this software; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street,
 * Boston, MA 02110-1301, USA.
 */

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <gnuradio/io_signature.h>
#include <stdio.h>
#include "vecadd_impl.h"

namespace gr {
  namespace ornl {

    vecadd::sptr
    vecadd::make(int device)
    {
      return gnuradio::get_initial_sptr
        (new vecadd_impl(device));
    }

    /*
     * The private constructor
     */
    vecadd_impl::vecadd_impl(int device)
      : gr::sync_block("vecadd",
              gr::io_signature::make(2, 2, sizeof(int)),
              gr::io_signature::make(1, 1, sizeof(int)))
    {
      device_ = device;
      brisbane_init(NULL, NULL, true);
      brisbane_kernel_create("vecadd", &kernel_vecadd);
      int max_ni = max_noutput_items();
      long max_ob = max_output_buffer(0);
      printf("[%s:%d] max_ni[%d], max_ob[%ld]\n", __FILE__, __LINE__, max_ni, max_ob);
      mem_out = NULL;
    }

    /*
     * Our virtual destructor.
     */
    vecadd_impl::~vecadd_impl()
    {
      printf("[%s:%d] ~Dest\n", __FILE__, __LINE__);
      brisbane_kernel_release(kernel_vecadd);
      brisbane_mem_release(mem_in0);
      brisbane_mem_release(mem_in1);
      brisbane_mem_release(mem_out);
      brisbane_finalize();
    }

    int
    vecadd_impl::work(int noutput_items,
        gr_vector_const_void_star &input_items,
        gr_vector_void_star &output_items)
    {
      const int *in0 = (const int *) input_items[0];
      const int *in1 = (const int *) input_items[1];
      int *out = (int *) output_items[0];

      // Do <+signal processing+>
      int max_noutputs = max_noutput_items();
      std::string sname = symbol_name();
      printf("[%s:%d] noutput_items[%d] max_noutput_items[%d] name[%s]\n", __FILE__, __LINE__, noutput_items, max_noutputs, sname.c_str());

      if (!mem_out) {
        printf("[%s:%d]\n", __FILE__, __LINE__);
        brisbane_mem_create(max_noutputs * sizeof(int), &mem_in0);
        brisbane_mem_create(max_noutputs * sizeof(int), &mem_in1);
        brisbane_mem_create(max_noutputs * sizeof(int), &mem_out);
      }

      brisbane_kernel_setmem(kernel_vecadd, 0, mem_out, brisbane_w);
      brisbane_kernel_setmem(kernel_vecadd, 1, mem_in0, brisbane_r);
      brisbane_kernel_setmem(kernel_vecadd, 2, mem_in1, brisbane_r);

      brisbane_task task0;
      brisbane_task_create(&task0);
      brisbane_task_h2d_full(task0, mem_in0, (void*) in0);
      brisbane_task_h2d_full(task0, mem_in1, (void*) in1);
      size_t kernel_vecadd_off[1] = { 0 };
      size_t kernel_vecadd_idx[1] = { (size_t) noutput_items };
      brisbane_task_kernel(task0, kernel_vecadd, 1, kernel_vecadd_off, kernel_vecadd_idx);
      brisbane_task_d2h_full(task0, mem_out, (void*) out);
      brisbane_task_submit(task0, device_, NULL, true);

      brisbane_task_release(task0);

      // Tell runtime system how many output items we produced.
      return noutput_items;
    }

  } /* namespace ornl */
} /* namespace gr */

